package com.orasi.utils.test.cukes;

import cucumber.runtime.Runtime;
import cucumber.runtime.model.CucumberExamples;
import cucumber.runtime.model.CucumberFeature;
import cucumber.runtime.model.CucumberScenario;
import cucumber.runtime.model.CucumberScenarioOutline;
import gherkin.formatter.Formatter;
import org.testng.ITest;
import org.testng.SkipException;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.Test;

/**
 * This is a Test Class which represents a Cucumber Scenario. It is intended
 * to be generated by a factory or another method which can convert Cucumber
 * features to TestNG tests.
 * 
 * @author Brian Becker
 */
public class CucumberScenarioTest implements ITest {

    private final CucumberScenario scenario;
    private final CucumberScenarioOutline outline;
    private final Formatter formatter;
    private final CucumberLoggingReporter reporter;
    private final Runtime runtime; 
    private final int priority;
    private final CucumberFeature feature;
    
    private String testName;
    
    public CucumberScenarioTest(CucumberScenario cs, CucumberScenarioOutline cso, Formatter formatter,
            CucumberLoggingReporter reporter, Runtime runtime, int priority, CucumberFeature feature) {
        this.scenario = cs;
        this.outline = cso;
        this.formatter = formatter;
        this.reporter = reporter;
        this.runtime = runtime;
        this.priority = priority;
        this.feature = feature;
    }    
    
    /**
     * The Cucumber test itself, which is executed, and a variety of exceptions
     * will be passed through Cucumber or generated if the test has been
     * determined to be skipped, or not defined.
     * 
     * @throws Throwable 
     */
    @Test
    public void test() throws Throwable {
        if(outline != null) {
            outline.formatOutlineScenario(formatter);
            for(CucumberExamples exs : outline.getCucumberExamplesList()) {
                formatter.examples(exs.getExamples());
            }
        }
        if(feature != null) {
            formatter.uri(feature.getPath());
            formatter.feature(feature.getGherkinFeature());
        }
        scenario.run(formatter, reporter, runtime);
        formatter.eof();
        // Fail, skip, or undefined. However, we can only fail or skip tests,
        // so let's call undefined a skip.
        switch(reporter.getLastResult().getStatus()) {
            case "failed":
                throw reporter.getLastResult().getError();
            case "skipped":
                throw new SkipException("Skipped Test");
            case "undefined":
                throw new SkipException("Undefined");
        }
    }    

    /**
     * Before the method, get the test name to stuff into the current
     * test name value. This is a pretty formatted name which consists
     * of the actual Scenario title, as well as the parameters if
     * the scenario is actually a scenario outline.
     */
    @BeforeMethod(alwaysRun = true)
    public void before() {
        testName = scenario.getGherkinModel().getName();
        if(outline != null) {
            testName = testName + " [" + scenario.getVisualName().substring(1,scenario.getVisualName().length() - 1) + "]";
        }
    }
    
    /**
     * The Test Name which is generated by the Gherkin Keyword and Model
     * Name. It will be displayed in NetBeans and Eclipse test frontends,
     * and is needed to implement ITest.
     * 
     * @return  Name of this Cucumber Scenario
     */
    @Override
    public String getTestName() {
        return this.testName != null ? this.testName : "Unknown";
    }

    /**
     * This is the Priority which is retrieved by the CucumberInterceptor
     * to rearrange the selected methods. The priority should be changed
     * so that the entire sequence of scenarios is executed in a well
     * defined order according to the specifications.
     * 
     * @return  Priority (ordering) for this Test
     */
    public int priority() {
        return this.priority;
    }
    
}
